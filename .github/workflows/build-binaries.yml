name: Build & Release MCP Optimizer Binaries

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 3.1.0)'
        required: false
        default: ''

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: win32-x64
            binary_name: mcp-optimizer-windows-x64.exe

          - os: macos-latest
            platform: darwin-x64
            binary_name: mcp-optimizer-macos-x64

          - os: macos-latest
            platform: darwin-arm64
            binary_name: mcp-optimizer-macos-arm64

          - os: ubuntu-latest
            platform: linux-x64
            binary_name: mcp-optimizer-linux-x64

          - os: ubuntu-latest
            platform: linux-arm64
            binary_name: mcp-optimizer-linux-arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (skip security in CI)
        env:
          OPTIMIZER_SKIP_SECURITY: "true"
        run: |
          npm ci
          python -m pip install --upgrade pip pyinstaller

      - name: Ensure src directory
        shell: bash
        run: mkdir -p src

      - name: Create Python CLI source
        shell: bash
        run: |
          cat > src/main.py << 'PYTHON_EOF'
          #!/usr/bin/env python3
          """
          MCP Prompt Optimizer - ${{ matrix.platform }} Binary
          Advanced Local Prompt Intelligence Engine with complete privacy
          """
          import sys, json, argparse, os
          
          __version__ = "3.1.0"
          __platform__ = "${{ matrix.platform }}"
          
          def check_license():
              api_key = os.environ.get('OPTIMIZER_API_KEY')
              if not api_key:
                  return {
                      'status': 'error',
                      'message': 'No OPTIMIZER_API_KEY found',
                      'platform': __platform__,
                      'version': __version__
                  }
              if len(api_key) < 20:
                  return {
                      'status': 'error',
                      'message': 'Invalid API key format',
                      'platform': __platform__,
                      'version': __version__
                  }
              return {
                  'status': 'valid',
                  'platform': __platform__,
                  'version': __version__,
                  'key_length': len(api_key),
                  'features': [
                      'local_processing',
                      'template_management',
                      'cross_platform_support',
                      'security_validation'
                  ]
              }
          
          def main():
              parser = argparse.ArgumentParser(description=f'MCP Prompt Optimizer Local v{__version__}')
              parser.add_argument('--version', '-v', action='store_true')
              parser.add_argument('--check-license', action='store_true')
              args, _ = parser.parse_known_args()
              
              if args.version:
                  print(__version__)
                  return 0
              if args.check_license:
                  result = check_license()
                  print(json.dumps(result, indent=2))
                  return 0 if result['status'] == 'valid' else 1
              
              print(f'MCP Prompt Optimizer v{__version__} ({__platform__})')
              print('Use --check-license to validate your API key')
              return 0
          
          if __name__ == '__main__':
              sys.exit(main())
          PYTHON_EOF

      - name: Handle existing Windows binary
        if: matrix.platform == 'win32-x64'
        shell: bash
        run: |
          mkdir -p dist
          if [ -f "bin/${{ matrix.binary_name }}" ]; then
            cp "bin/${{ matrix.binary_name }}" "dist/${{ matrix.binary_name }}"
            echo "✅ Using existing Windows binary"
          else
            echo "❌ Windows binary not found"
            exit 1
          fi

      - name: Build binary (non-Windows)
        if: matrix.platform != 'win32-x64'
        shell: bash
        run: |
          mkdir -p dist
          python -m PyInstaller \
            --onefile \
            --name "${{ matrix.binary_name }}" \
            --distpath dist/ \
            src/main.py
          chmod +x "dist/${{ matrix.binary_name }}"
          echo "✅ Binary built successfully"

      - name: Smoke test binary
        shell: bash
        run: |
          BINARY_PATH="dist/${{ matrix.binary_name }}"
          ls -la "$BINARY_PATH"
          if [ "${{ runner.os }}" = "Windows" ]; then
            "$BINARY_PATH" --version
          else
            "./$BINARY_PATH" --version
          fi

      - name: Update manifest entry for this platform
        shell: bash
        run: |
          node secure-update/generate-manifest.js \
            --platform ${{ matrix.platform }} \
            --binary dist/${{ matrix.binary_name }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.platform }}
          path: dist/${{ matrix.binary_name }}
          retention-days: 30

      - name: Upload platform manifest
        uses: actions/upload-artifact@v4
        with:
          name: manifest-${{ matrix.platform }}
          path: manifest.json
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Organize release assets
        run: |
          mkdir -p release
          find artifacts/ -name "mcp-optimizer-*" -type f -exec cp {} release/ \;
          echo "📦 Release binaries:"
          ls -la release/

      - name: Merge manifests
        run: |
          node -e "
          const fs = require('fs'), path = require('path');
          const finalManifest = {
            version: (process.env.TAG || '').replace(/^v/, ''),
            build_commit: process.env.SHA,
            build_date: new Date().toISOString(),
            binaries: {},
            security: { requires_api_key: true, verification_required: true, signature_required: false },
            features: [
              'mega_prompt_context_detection',
              'simplicity_enum_fix',
              'hybrid_llm_optimization',
              'universal_parameter_preservation',
              'cross_platform_support'
            ],
            platforms_supported: [ 'win32-x64','darwin-x64','darwin-arm64','linux-x64','linux-arm64' ],
            generation: { timestamp: new Date().toISOString(), dev_mode: false, generator_version: '1.0.0', release_tag: process.env.TAG }
          };
          let merged = 0;
          for (const dir of fs.readdirSync('artifacts')) {
            if (dir.startsWith('manifest-')) {
              const p = path.join('artifacts', dir, 'manifest.json');
              if (fs.existsSync(p)) {
                const m = JSON.parse(fs.readFileSync(p, 'utf8'));
                Object.assign(finalManifest.binaries, m.binaries || {});
                merged++;
                console.log('✅ merged', dir);
              }
            }
          }
          const plats = Object.keys(finalManifest.binaries);
          const verified = plats.filter(p => finalManifest.binaries[p]?.verified).length;
          finalManifest.build_summary = {
            total_platforms: plats.length,
            binaries_found: verified,
            binaries_missing: plats.length - verified,
            build_complete: verified === plats.length,
            merged_manifests: merged
          };
          fs.writeFileSync('release/manifest.json', JSON.stringify(finalManifest, null, 2));
          console.log('📋 Final manifest platforms:', plats.length);
          "
        env:
          TAG: ${{ github.ref_name }}
          SHA: ${{ github.sha }}

      - name: Validate release assets
        run: |
          echo "🔍 Validating release assets..."
          EXPECTED_BINARIES=(
            "mcp-optimizer-windows-x64.exe"
            "mcp-optimizer-macos-x64"
            "mcp-optimizer-macos-arm64"
            "mcp-optimizer-linux-x64"
            "mcp-optimizer-linux-arm64"
          )
          for binary in "${EXPECTED_BINARIES[@]}"; do
            if [ -f "release/$binary" ]; then
              echo "✅ $binary"
            else
              echo "❌ Missing: $binary"; exit 1
            fi
          done
          if [ -f "release/manifest.json" ]; then
            echo "✅ manifest.json"
            node -e "const m=require('./release/manifest.json');console.log('📋 Manifest Summary:\\n  Version:',m.version,'\\n  Platforms:',Object.keys(m.binaries).length,'\\n  Build complete:',m.build_summary.build_complete)"
          else
            echo "❌ Missing: manifest.json"; exit 1
          fi
          echo "🎉 All release assets validated!"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "MCP Prompt Optimizer Local ${{ github.ref_name }}"
          body: |
            ## 🌍 Cross-Platform Release
            MCP Prompt Optimizer Local with native binaries for all platforms!

            ### 📦 Supported Platforms
            - ✅ Windows x64 — `mcp-optimizer-windows-x64.exe`
            - ✅ macOS Intel — `mcp-optimizer-macos-x64`
            - ✅ macOS Apple Silicon — `mcp-optimizer-macos-arm64`
            - ✅ Linux x64 — `mcp-optimizer-linux-x64`
            - ✅ Linux ARM64 — `mcp-optimizer-linux-arm64`

            ### 🚀 Quick Install
            ```bash
            npm install -g mcp-prompt-optimizer-local
            ```

            ### 🔧 Setup
            ```bash
            export OPTIMIZER_API_KEY="your-key-here"
            mcp-prompt-optimizer-local check-license
            ```

            All binaries are verified with SHA256 integrity checking.
          files: |
            release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}